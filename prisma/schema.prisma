// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Asset {
  id        String   @id @default(uuid())
  filename  String
  path      String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @unique
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String?
}

model User {
  id        String    @id @default(uuid())
  name      String
  password  String
  email     String    @unique
  avatar    Asset?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
  opinions  Opinion[]
}

enum OpinionType {
  LIKE
  DISLIKE
}

model Opinion {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  article     Article     @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId   String
  opinionType OpinionType
}

model Article {
  id        String    @id @default(uuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  opinions  Opinion[]
  assets    Asset[]
}
